<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[lazdBlog]]></title><description><![CDATA[The blog of Larry Davis]]></description><link>http://lazd.github.io/</link><generator>RSS for Node</generator><lastBuildDate>Fri, 14 Mar 2014 19:14:17 GMT</lastBuildDate><atom:link href="http://lazd.github.io/feed.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Larry Davis]]></author><pubDate>Fri, 14 Mar 2014 19:14:17 GMT</pubDate><copyright><![CDATA[2014 Larry Davis]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[Larry Davis]]></managingEditor><webMaster><![CDATA[Larry Davis]]></webMaster><ttl>60</ttl><item><title><![CDATA[DOMly - The fast template system that clones]]></title><description><![CDATA[<a name="flashback:-the-state-of--innerhtml--performance-in-2008" class="anchor" href="#flashback:-the-state-of--innerhtml--performance-in-2008"><h2>Flashback: The state of <code>innerHTML</code> performance in 2008</h2>
</a><blockquote>
<p>&quot;The most obvious conclusion of these tests is that innerHTML is faster than &quot;real&quot; W3C DOM methods in all browsers.&quot;</p>
<p>&#8212; <a href="http://www.quirksmode.org/dom/innerhtml.html">Quirksmode, circa 2008</a></p>
</blockquote>
<a name="newsflash:--innerhtml--is-slow." class="anchor" href="#newsflash:--innerhtml--is-slow."><h2>Newsflash: <code>innerHTML</code> is slow.</h2>
</a><p>The time-honored best-practice is no longer best-practice. While you weren&#39;t looking, JavaScript engines have <a href="http://blog.chromium.org/2010/12/new-crankshaft-for-v8.html">doubled in performance</a> multiple times, numerous <a href="https://bugs.webkit.org/show_bug.cgi?id=82201">optimizations have been made</a>, and it&#39;s <a href="http://jsperf.com/clonenode-vs-createelement-performance/32">no longer the case</a> that <code>innerHTML</code> is the fastest way to get elements into the DOM.</p>
<figure>
    <a href="http://jsperf.com/clonenode-vs-createelement-performance/32" title="Benchmarks on jsPerf"><img src="images/bench-createElement-cloneNode-innerHTML.png" alt="Benchmark results: cloneNode vs createElement vs innerHTML" target="_blank"></a>
    <figcaption><code>innerHTML</code> is an order of magnitude slower than DOM methods on mobile</figcaption>
</figure>

<!-- Results for cloneNode vs createElement vs innerHTML -->
<!-- <script src="http://www.browserscope.org/user/tests/table/agt1YS1wcm9maWxlcnIRCxIEVGVzdBiAgIDUzbCvCww?o=js"></script> -->

<a name="so-why-are-we-still-using--innerhtml--based-templates-" class="anchor" href="#so-why-are-we-still-using--innerhtml--based-templates-"><h2>So why are we still using <code>innerHTML</code> based templates?</h2>
</a><p>Because the tooling doesn&#39;t exist.</p>
<p>We haven&#39;t seen a major release of a full-featured, production ready template system that compiles to DOM nodes. <a href="http://leonidas.github.io/transparency/">transparency</a> and <a href="https://github.com/medikoo/domjs">domjs</a> aren&#39;t really template systems, <a href="http://beebole.com/pure/">pure</a> is magical to the point of confusion, <a href="https://github.com/blakeembrey/dombars">DOMBars</a> does more than just templates, and <a href="https://github.com/tildeio/htmlbars">HTMLBars</a> is still in the works.</p>
<a name="enter-domly" class="anchor" href="#enter-domly"><h2>Enter DOMly</h2>
</a><p><img src="images/DOMly_logo_small.png" class="right titleImage" alt="DOMly logo"></p>
<p>DOMly, named after <a href="http://en.wikipedia.org/wiki/Dolly_(sheep)">Dolly, the first mammal to be cloned</a>, is a template system that takes advantage <code>createElement</code> and <code>cloneNode</code>.</p>
<p>DOMly goal is to be approachable, fast, and lightweight.</p>
<a name="fast.-very-fast." class="anchor" href="#fast.-very-fast."><h3>Fast. Very fast.</h3>
</a><p>7x the performance of doT and Handlebars and 2x the perforamnce of HTMLBars.</p>
<p>Precompile your templates on the server, and when you render them in the browser, you&#39;ll have a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node">Node</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment">DocumentFragment</a> ready for insertion into the DOM and references to elements you&#39;ll need to mutate in the future.</p>
<a name="pretty-syntax" class="anchor" href="#pretty-syntax"><h3>Pretty syntax</h3>
</a><p>The syntax is a combination of HTML for markup and control flow, dot notation for property references, <code>()</code> for invocation, and Mustache-style <code>{{blocks}}</code> for safe variable substitution:</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span>{{data.header}}<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;if</span> <span class="na">data</span><span class="err">.</span><span class="na">items</span><span class="err">.</span><span class="na">length</span><span class="nt">&gt;</span>
  <span class="nt">&lt;ul&gt;</span>
    <span class="nt">&lt;foreach</span> <span class="na">data</span><span class="err">.</span><span class="na">items</span><span class="err">,</span><span class="na">index</span><span class="nt">&gt;</span>
      <span class="nt">&lt;li</span> <span class="na">if-data</span><span class="err">.</span><span class="na">current=</span><span class="s">&#39;class=&quot;current&quot;&#39;</span><span class="nt">&gt;</span>
        <span class="nt">&lt;if</span> <span class="na">data</span><span class="err">.</span><span class="na">url</span><span class="nt">&gt;</span>
          <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;{{data.url}}&quot;</span><span class="nt">&gt;</span>{{index}}. {{data.name}}<span class="nt">&lt;/a&gt;</span>
        <span class="nt">&lt;else&gt;</span>
          {{index}}. {{data.name}}
        <span class="nt">&lt;/if&gt;</span>
      <span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;/foreach&gt;</span>
  <span class="nt">&lt;/ul&gt;</span>
<span class="nt">&lt;else&gt;</span>
  <span class="nt">&lt;p&gt;</span>There are no items yet.<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/if&gt;</span>
</pre></div>
</code></pre>
<figcaption class="center">A basic DOMly template</figcaption>


<a name="powerful--enough-" class="anchor" href="#powerful--enough-"><h3>Powerful (enough)</h3>
</a><p>DOMly supports conditionals, loops, helpers, partials, and even raw JavaScript.</p>
<a name="partials" class="anchor" href="#partials"><h4>Partials</h4>
</a><pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;partial</span> <span class="na">MyApp</span><span class="err">.</span><span class="na">Templates</span><span class="err">.</span><span class="na">myPartial</span><span class="err">(</span><span class="na">data</span><span class="err">)</span><span class="nt">&gt;&lt;/partial&gt;</span>
</pre></div>
</code></pre>
<a name="block-helpers" class="anchor" href="#block-helpers"><h4>Block helpers</h4>
</a><pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;helper</span> <span class="na">MyApp</span><span class="err">.</span><span class="na">Helpers</span><span class="err">.</span><span class="na">myHelper</span><span class="err">(</span><span class="na">data</span><span class="err">)</span><span class="nt">&gt;</span>
  This string is evaluated {{data.forSubstitutions}} and passed as the last argument.
<span class="nt">&lt;/helper&gt;</span>
</pre></div>
</code></pre>
<a name="class-methods-and-data" class="anchor" href="#class-methods-and-data"><h4>Class methods and data</h4>
</a><pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;if</span> <span class="na">this</span><span class="err">.</span><span class="na">isFeatured</span><span class="err">(</span><span class="na">data</span><span class="err">.</span><span class="na">id</span><span class="err">,</span><span class="na">this</span><span class="err">.</span><span class="na">featured</span><span class="err">)</span><span class="nt">&gt;</span>
  This item is featured!
<span class="nt">&lt;/if&gt;</span>
</pre></div>
</code></pre>
<a name="object-iteration-with-named-iterator" class="anchor" href="#object-iteration-with-named-iterator"><h4>Object iteration with named iterator</h4>
</a><pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;forin</span> <span class="na">data</span><span class="err">.</span><span class="na">object</span><span class="err">,</span><span class="na">prop</span><span class="nt">&gt;</span>
    {{prop}}: {{data}}
<span class="nt">&lt;/forin&gt;</span>
</pre></div>
</code></pre>
<a name="raw-javascript" class="anchor" href="#raw-javascript"><h4>Raw JavaScript</h4>
</a><pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;js&gt;</span>
    data.count += 1;
<span class="nt">&lt;/js&gt;</span>
</pre></div>
</code></pre>
<a name="helpers---sub-expressions" class="anchor" href="#helpers---sub-expressions"><h4>Helpers &amp; sub-expressions</h4>
</a><pre><code class="lang-html"><div class="highlight"><pre>{{captalize(reverse(data.name))}}
</pre></div>
</code></pre>
<a name="limitations" class="anchor" href="#limitations"><h3>Limitations</h3>
</a><a name="no-room-to-grow-syntactically" class="anchor" href="#no-room-to-grow-syntactically"><h4>No room to grow syntactically</h4>
</a><p>Because DOMly templates are parsable HTML, you can&#39;t use <code>/</code>, <code>=</code>, or spaces in statements.</p>
<a name="must-be-be-compiled-on-the-server" class="anchor" href="#must-be-be-compiled-on-the-server"><h4>Must be be compiled on the server</h4>
</a><p>Although it would be possible to compile on the client, you shouldn&#39;t be doing that anyway.</p>
<a name="doesn-t-support-arbitrary-expressions" class="anchor" href="#doesn-t-support-arbitrary-expressions"><h4>Doesn&#39;t support arbitrary expressions</h4>
</a><p>You won&#39;t be able to write <code>{{data.count+1}}</code> anywhere.</p>
<a name="beta-quality" class="anchor" href="#beta-quality"><h4>Beta quality</h4>
</a><p>DOMly is the newest language on the block. Althought it&#39;s unit tested and benchmarks, it&#39;s not battle-tested and can&#39;t be guarenteed to be bug-free. </p>
<p>However, in 2014, we&#39;ll see a number of template languages switch to pure DOM methods for a performance boost, and DOMly will be there to challenge them to be the best and fastest that they can be.</p>
<a name="that-s-great--but-why-not-base-it-off-an-existing-template-system-" class="anchor" href="#that-s-great--but-why-not-base-it-off-an-existing-template-system-"><h2>That&#39;s great, but why not base it off an existing template system?</h2>
</a><a name="-.-it-s-an-experiment" class="anchor" href="#-.-it-s-an-experiment"><h3>1. It&#39;s an experiment</h3>
</a><p>DOMly didn&#39;t set out to be replace heavy hitters like Handlebars. DOMly started as an experiment to establish the performance gains of using DOM methods for templating, the feasibility of maintaining a set of these templates, and the actual amount of code required to do this from scratch.</p>
<p>The goal was to validate the hypothesis:</p>
<blockquote>
<p>It&#39;s both possible and simple to build a template language that takes advantage of the performance gains of native DOM methods.</p>
</blockquote>
<a name="-.-simplicity" class="anchor" href="#-.-simplicity"><h3>2. Simplicity</h3>
</a><p>Existing template systems are quite complex. From advanced <a href="https://github.com/wycats/handlebars.js/blob/master/src/handlebars.l#L31-L50">Jison parser tricks</a> to dozens of <a href="https://github.com/olado/doT/blob/master/doT.js#L15">regular expressions so complex that they&#39;ve taken on a life of their own</a>, to <a href="http://jlongster.github.io/nunjucks/templating.html">complex feature sets</a>, these projects aren&#39;t very approachable. To re-tool an existing language would be a massive time sink just to validate a hypothesis.</p>
<p>Many existing template systems require runtimes that handle helpers and partials. This results in an additional call on the stack for method invocation which can affect performance. They&#39;re tiny, but the size doesn&#39;t help either gzipped, Handlebar&#39;s runtime is 4k, Underscore is 5k.</p>
<a name="-.-syntax" class="anchor" href="#-.-syntax"><h3>3. Syntax</h3>
</a><p>After years of staring at PHP and JSPs, I think we could do better than this:</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;h1&gt;</span><span class="err">&lt;</span>%- obj.header %&gt;<span class="nt">&lt;/h1&gt;</span>
<span class="err">&lt;</span>% if(obj.hasItems) { %&gt;
  <span class="nt">&lt;ul&gt;</span>
  <span class="err">&lt;</span>% _.each(obj.items, function(item) { %&gt;
    <span class="err">&lt;</span>% if(item.current) { %&gt;
      <span class="nt">&lt;li&gt;&lt;strong&gt;</span><span class="err">&lt;</span>%- item.name %&gt;<span class="nt">&lt;/strong&gt;&lt;/li&gt;</span>
    <span class="err">&lt;</span>% } else { %&gt;
      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;&lt;%- item.url %&gt;&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%- item.name %&gt;<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
    <span class="err">&lt;</span>% } %&gt;
  <span class="err">&lt;</span>% }); %&gt;
  <span class="nt">&lt;/ul&gt;</span>
<span class="err">&lt;</span>% } else { %&gt;
  <span class="nt">&lt;p&gt;</span>The list is empty.<span class="nt">&lt;/p&gt;</span>
<span class="err">&lt;</span>% } %&gt;
</pre></div>
</code></pre>
<figcaption class="center">A basic Underscore template</figcaption>



<a name="your-turn.-how-does-this-make-you-feel-" class="anchor" href="#your-turn.-how-does-this-make-you-feel-"><h3>Your turn. How does this make you feel?</h3>
</a><p>Does the mix of markup and template code bug you, or is the best thing since sliced bread?</p>
<p>See <a href="https://github.com/lazd/DOMly">the source on Github</a> and the <a href="http://jsperf.com/domly-vs-the-world">benchmarks on jsPerf</a>. </p>
]]></description><link>http://lazd.github.io/domly-the-fast-template-system-that-clones.html</link><guid isPermaLink="true">http://lazd.github.io/domly-the-fast-template-system-that-clones.html</guid><category><![CDATA[javascript]]></category><category><![CDATA[browsers]]></category><dc:creator><![CDATA[Larry Davis]]></dc:creator><pubDate>Thu, 27 Feb 2014 08:00:00 GMT</pubDate></item><item><title><![CDATA[No-nonsense vertical centering]]></title><description><![CDATA[<style>
    .navbar {
        margin: 1rem;
    }
    .navbar a {
        padding: 0 1rem;

        background: gray;

        color: black;

        text-decoration: none;

        text-shadow: none;
    }

    .navbar a:not(:last-child) {
        border-right: 0.0625rem solid rgb(0,0,0);
    }

    .navbar-table {
        display: table;

        height: 2rem;
    }

    .navbar-table a {
        display: table-cell;

        vertical-align: middle;
    }

    .navbar-flex {
        display: flex;

        height: 2rem;
    }

    .navbar-flex a {
        display: flex;

        align-items: center;
    }
</style>

<figure class="headingImage">
<img src="images/rusty-spoon-and-recipe-book-large.jpg" title="Rusty spoon and recipe book, courtsey of Abandoned Kansai">
<figcaption>Don&#39;t do it, we can get through this.</figure>
</figure>

<a name="historically-impractical" class="anchor" href="#historically-impractical"><h2>Historically impractical</h2>
</a><p>Vertically centering with CSS has always required gross hacks. From negative margins to JavaScript, old-hat devs have brought out the dirtiest of tricks to accomplish this simple and oft needed layout technique.</p>
<p>Things aren&#39;t perfect yet, but there are two, no-nonsense techniques that will help you get the job done without making you cringe or want to <a href="http://www.reddit.com/r/programming/comments/1yypr8/refreshing_satirical_article_backend_css/cfp2whv">off yourself with a rusty spoon</a>.</p>
<a name="the-problem" class="anchor" href="#the-problem"><h2>The problem</h2>
</a><p>We need to build a horizontal nav bar with elements about 32px high with vertically centered text in each of the links.</p>
<a name="the-solution-s-" class="anchor" href="#the-solution-s-"><h2>The solution(s)</h2>
</a><p>Though there are a few other solutions, I&#39;m going to talk about two flexible and reliable approaches. The first gives the ultimate in flexibility, and the second works great for situations where old browser support is still on the table.</p>
<p>We&#39;ll use the same markup for both solutions:</p>
<pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;navbar&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Item 1<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Item 2<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Item 3<span class="nt">&lt;/a&gt;</span>
    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span><span class="nt">&gt;</span>Item 4<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/nav&gt;</span>
</pre></div>
</code></pre>
<a name="-.-use-the-flexible-box-model" class="anchor" href="#-.-use-the-flexible-box-model"><h2>1. Use the flexible box model</h2>
</a><p>Flexbox is the holy grail of web layouts. It gives web developers the tools they&#39;ve been clamoring for with a (relatively) simple and easy to understand set of attributes.</p>
<p>The CSS properties for the latest spec are simple:</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.navbar-flex</span> <span class="p">{</span>
    <span class="c">/* Behave like a flexible box */</span>
    <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>

    <span class="k">height</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.navbar-flex</span> <span class="nt">a</span> <span class="p">{</span>
    <span class="c">/* Behave like a flexible box */</span>
    <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>

    <span class="c">/* Center items on the cross axis (vertical) */</span>
    <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<a name="demo" class="anchor" href="#demo"><h3>Demo</h3>
</a><nav class="navbar navbar-flex">
    <a href="#">Item 1</a>
    <a href="#">Item 2</a>
    <a href="#">Item 3</a>
    <a href="#">Item 4</a>
</nav>

<a name="pros:" class="anchor" href="#pros:"><h3>Pros:</h3>
</a><ul>
<li>Works with multi-line text and arbitrary elements</li>
<li>Enables responsive layouts that can convert your horizontal menu to vertical with a single property</li>
</ul>
<a name="cons:" class="anchor" href="#cons:"><h3>Cons:</h3>
</a><ul>
<li>Only works on the latest versions of modern browsers</li>
<li>A bit tough to understand</li>
<li><a href="http://css-tricks.com/using-flexbox/">Deprecated and prefixed properties</a> required for full support on older browsers</li>
</ul>
<a name="browser-support" class="anchor" href="#browser-support"><h3>Browser support</h3>
</a><ul>
<li>IE 10+</li>
<li>Safari on desktop and iOS</li>
<li>Firefox</li>
<li>Chrome</li>
<li>Android</li>
</ul>
<p>See the <a href="http://caniuse.com/flexbox">support tables on caniuse</a> for details.</p>
<a name="-.-fake-it-with-fake-tables" class="anchor" href="#-.-fake-it-with-fake-tables"><h2>2. Fake it with fake tables</h2>
</a><p>Layouts done using the <code>&lt;table&gt;</code> tag are hated for the lack of semantics and clumsy syntax, and rightly so.</p>
<p>However, you can have all the power and flexibility of tables without the <code>&lt;table&gt;</code> tag using <code>display: table</code>.</p>
<p>The CSS properties are simple:</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.navbar-table</span> <span class="p">{</span>
    <span class="c">/* Behave like a table */</span>
    <span class="k">display</span><span class="o">:</span> <span class="n">table</span><span class="p">;</span>

    <span class="k">height</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.navbar-table</span> <span class="nt">a</span> <span class="p">{</span>
    <span class="c">/* Behave like a table cell */</span>
    <span class="k">display</span><span class="o">:</span> <span class="k">table-cell</span><span class="p">;</span>

    <span class="c">/* Vertically center content */</span>
    <span class="k">vertical-align</span><span class="o">:</span> <span class="k">middle</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<a name="demo" class="anchor" href="#demo"><h3>Demo</h3>
</a><nav class="navbar navbar-table">
    <a href="#">Item 1</a>
    <a href="#">Item 2</a>
    <a href="#">Item 3</a>
    <a href="#">Item 4</a>
</nav>

<a name="pros:" class="anchor" href="#pros:"><h3>Pros:</h3>
</a><ul>
<li>Works in very old browsers</li>
<li>Works with multi-line text and arbitrary elements</li>
</ul>
<a name="cons:" class="anchor" href="#cons:"><h3>Cons:</h3>
</a><ul>
<li>No support for responsive design, so your menu is stuck horizontal</li>
<li>Feels dirty</li>
</ul>
<a name="browser-support" class="anchor" href="#browser-support"><h3>Browser support</h3>
</a><ul>
<li>IE 8+</li>
<li>Every other browser ever made</li>
</ul>
<p>See the <a href="http://caniuse.com/css-table">support tables on caniuse</a> for details.</p>
<a name="it-doesn-t-stop-at-nav-bars" class="anchor" href="#it-doesn-t-stop-at-nav-bars"><h2>It doesn&#39;t stop at nav bars</h2>
</a><p>Both of these techniques can be used vertically center anything from images to modal dialogs. Use the above techniques to get full vertical centering satisfaction and avoid the odd hacks that fall apart when the weather changes.</p>
<a name="the-other-techniques" class="anchor" href="#the-other-techniques"><h2>The other techniques</h2>
</a><p>There several other ways to get this done in CSS. A few of the more popular methods are discussed below</p>
<a name="use-css-transforms" class="anchor" href="#use-css-transforms"><h3>Use CSS transforms</h3>
</a><p>As outlined by Brian Gonzalez in his article <a href="http://davidwalsh.name/css-vertical-center">CSS Vertical Centering</a>, it&#39;s possible to vertically center using CSS <code>transform</code> with a negative <code>translateY</code>.</p>
<p>It doesn&#39;t work if the parent doesn&#39;t have a height specified, and the browser support is less than desirable, with this hack working in IE 9+.</p>
<a name="use-a-fixed-height-and-absolute-positioning" class="anchor" href="#use-a-fixed-height-and-absolute-positioning"><h3>Use a fixed height and absolute positioning</h3>
</a><p>Stephen Shaw outlines a number of techniques in his article <a href="http://coding.smashingmagazine.com/2013/08/09/absolute-horizontal-vertical-centering-css/">Absolute Horizontal and Vertical centering in CSS</a>, two of which there are a few techniques that involve absolute positioning.</p>
<p>The first uses positioning against the sides of a parent element, but requires height to be declared. Browser support is decent, working in IE 8+, but not on Windows Phone.</p>
<p>The next absolute positioning technique requires width and height to be declared and uses negative margins to offset the inner box by half of its width and height. This time-honored technique works everywhere, including IE 6 and 7.</p>
<a name="use-a-ghost-element" class="anchor" href="#use-a-ghost-element"><h3>Use a ghost element</h3>
</a><p>As outlined by Chris Coyer in his article <a href="http://css-tricks.com/centering-in-the-unknown/">Centering in the Unknown</a>, you can use <code>vertical-align</code> and <code>inline-block</code> to center things.</p>
<p>It requires a dirty negative margin hack to keep things aligned, but it works in IE 8+.</p>
<a name="the--line-height--solution" class="anchor" href="#the--line-height--solution"><h3>The <code>line-height</code> solution</h3>
</a><p>For single-line text, you can set the <code>line-height</code> equal to the <code>height</code> of the box, getting you alignment.</p>
<p>If your text ends up wrapping, the second line falls out of the box. This works everywhere, but it&#39;s very brittle.</p>
<a name="calculate-with-javascript" class="anchor" href="#calculate-with-javascript"><h3>Calculate with JavaScript</h3>
</a><p>Finally, the oft used technique of measuring height using JavaScript and calculating the correct position on load and every time the window is resized. I&#39;m not even going to link to this, you should be doing your layouts with CSS.</p>
<a name="the-bottom-line-and-a-word-on-moving-the-web-forward" class="anchor" href="#the-bottom-line-and-a-word-on-moving-the-web-forward"><h2>The bottom line and a word on moving the web forward</h2>
</a><p>Flexbox aside, every CSS vertical centering technique is a hack. Your best bet is to suck it up until flexbox support is available everywhere and choose the hack that works best for your use case and target browser environment.</p>
<p>However, if you are in a position to do so, drop support for old browsers. The best way to drag netizens and their governing groups into the future is to level sanctions against them: you can&#39;t use my fancy site until you upgrade your browser.</p>
<hr>

<p><em class="grayText">Credit for the title photo goes to Florian of <a href="http://abandonedkansai.com/">Abandoned Kansai</a>. It&#39;s a photo from the kitchen of an abandoned middle school in Pripyat he visited and documented in his article <a href="http://abandonedkansai.com/2011/02/03/zone-of-alienation-pripyat-middle-school-no-3/">Zone Of Alienation - Pripyat: Middle School #3</a>.</em></p>
]]></description><link>http://lazd.github.io/no-nonsense-vertical-centering.html</link><guid isPermaLink="true">http://lazd.github.io/no-nonsense-vertical-centering.html</guid><category><![CDATA[css3]]></category><dc:creator><![CDATA[Larry Davis]]></dc:creator><pubDate>Wed, 26 Feb 2014 08:00:00 GMT</pubDate></item><item><title><![CDATA[mdn.io - Passive URL shortening for MDN]]></title><description><![CDATA[<p><img src="/images/mdn.png" class="left" alt="MDN" style="width: 128px">
Whenever you need to look something up on the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">Mozilla Developer Network</a>, you usually end up typing something like <code>mdn defineproperty</code> into the search bar and clicking the first link.</p>
<p>We&#39;ve taken that already simple process and made it simpler with mdn.io, the &quot;I&#39;m feeling lucky&quot; URL shortener for MDN.</p>
<div class="clear"></div>

<a name="how-do-i-use-it-" class="anchor" href="#how-do-i-use-it-"><h2>How do I use it?</h2>
</a><p>Simply type something like this in your address bar:</p>
<blockquote>
<p><a href="http://mdn.io/defineproperty" target="_blank">mdn.io/defineproperty</a></p>
</blockquote>
<p>You can even include spaces:</p>
<blockquote>
<p><a href="http://mdn.io/css%20transitions" target="_blank">mdn.io/css transitions</a></p>
</blockquote>
<p>Or hashes:</p>
<blockquote>
<p><a href="http://mdn.io/array#Methods_of_Array_instances" target="_blank">mdn.io/array#Methods_of_Array_instances</a></p>
</blockquote>
<a name="why-" class="anchor" href="#why-"><h2>Why?</h2>
</a><p>MDN URLs are quite long:</p>
<blockquote>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Methods_of_Array_instances">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Methods_of_Array_instances</a></p>
</blockquote>
<p>We needed a way to keep them short so they could be directly included in places we would otherwise say &quot;search for <em>__</em>.&quot;</p>
<a name="code-reviews" class="anchor" href="#code-reviews"><h3>Code reviews</h3>
</a><p>Let&#39;s say you&#39;re doing a code review and you need to link a peer to the documentation for the Array object:</p>
<pre><code><div class="highlight"><pre><span class="c1">// Array has an inbuilt forEach method, see mdn.io/array</span>
</pre></div>
</code></pre>
<a name="comments" class="anchor" href="#comments"><h3>Comments</h3>
</a><p>If you&#39;re writing JavaScript code that relies on some interesting in-built functionality others aren&#39;t familar with, it might be helpful to link to the documentation for it:</p>
<pre><code><div class="highlight"><pre><span class="c1">// See mdn.io/defineproperty</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s1">&#39;constant&#39;</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">writeable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">true</span>
<span class="p">})</span>
</pre></div>
</code></pre>
<a name="common-questions" class="anchor" href="#common-questions"><h3>Common questions</h3>
</a><p>Sometimes you just get asked the same question so many times you wish your chat client would auto-reply with the URL to the FM:</p>
<blockquote>
<p><strong>friend:</strong> hey dude, is it call or apply that takes an array?</p>
<p><strong>you:</strong> RTFM mdn.io/apply</p>
</blockquote>
<a name="what-is-this-sorcery-" class="anchor" href="#what-is-this-sorcery-"><h2>What is this sorcery?</h2>
</a><p>mdn.io isn&#39;t <em>really</em> a URL shortener. There&#39;s no need to create an entry for each page you want to link to; mdn.io simply redirects to a Google &quot;I&#39;m feeling lucky&quot; search for your query + <code>site:developer.mozilla.org</code>, which in turn redirects you to the first result.</p>
<p>Simple and hands off, like it should be. Check out <a href="https://github.com/lazd/mdn.io">the source on Github</a> for more details.</p>
<a name="a-big-thanks" class="anchor" href="#a-big-thanks"><h2>A big thanks</h2>
</a><p><a href="http://blakeembrey.me/">Blake Embrey</a> and I collaborated on this project and he continues to support it by hosting mdn.io. Thanks, Blake!<br></p>
]]></description><link>http://lazd.github.io/mdn-io-passive-url-shortening-for-mdn.html</link><guid isPermaLink="true">http://lazd.github.io/mdn-io-passive-url-shortening-for-mdn.html</guid><category><![CDATA[resources]]></category><category><![CDATA[javascript]]></category><category><![CDATA[node.js]]></category><dc:creator><![CDATA[Larry Davis]]></dc:creator><pubDate>Tue, 13 Aug 2013 07:00:00 GMT</pubDate></item><item><title><![CDATA[Scaleable interfaces with rem units]]></title><description><![CDATA[<a name="what-are-rem-units-" class="anchor" href="#what-are-rem-units-"><h2>What are rem units?</h2>
</a><p>According to <a href="http://www.w3.org/TR/css3-values/#rem-unit">W3 candidate reccomendation</a>, one root elastic measurement (rem) unit is equal to the <code>font-size</code> of the <code>&lt;html&gt;</code> element.</p>
<a name="hello-rem" class="anchor" href="#hello-rem"><h2>Hello rem</h2>
</a><p>Let&#39;s say you&#39;ve defined the <code>font-size</code> of the <code>&lt;html&gt;</code> element as 16 pixels, and you want a 48 pixel tall <code>&lt;header&gt;</code>. Basic math tells us that&#39;s 3 rem.</p>
<pre><code><div class="highlight"><pre><span class="nx">html</span> <span class="p">{</span>
    <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="o">:</span> <span class="mi">16</span><span class="nx">px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">header</span> <span class="p">{</span>
    <span class="nx">height</span><span class="o">:</span> <span class="mi">3</span><span class="nx">rem</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<a name="try-it" class="anchor" href="#try-it"><h2>Try it</h2>
</a><p>This blog is built using rem units; click the buttons below to adjust the <code>font-size</code> of the <code>&lt;html&gt;</code> element, and in turn, the entire site.</p>
<div id="resize">
    <button class="button large" id="decrease">-</button>
    <div id="pagePixelSize">16px</div>
    <button class="button large" id="increase">+</button>
</div>

<script>
    var fontSize = 16;
    function setSize(amount) {
        fontSize = (fontSize+amount);
        document.getElementById("pagePixelSize").innerHTML=fontSize+"px";
        document.querySelector("html").style.fontSize = fontSize+"px";
    }
    document.getElementById("resize").addEventListener("click", function(e) { e.preventDefault(); e.stopPropagation(); return false; }, false);
    document.getElementById("increase").addEventListener("click", function(e) { setSize(2);
    }, false);
    document.getElementById("decrease").addEventListener("click", function(e) { setSize(-2);
    }, false);
</script>

<a name="wait--how-is-that-different-from-em-" class="anchor" href="#wait--how-is-that-different-from-em-"><h2>Wait, how is that different from em?</h2>
</a><p>Elastic measurement units cascade (<a href="http://www.w3.org/TR/css3-values/#em-unit">em spec</a>), whereas root elastic measurement units are always relative to the root element. </p>
<p>With ems, the following situation becomes confusing:</p>
<a name="css:" class="anchor" href="#css:"><h3>CSS:</h3>
</a><pre><code class="lang-css"><div class="highlight"><pre><span class="nc">.container</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.em1</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
    <span class="k">border-top</span><span class="o">:</span> <span class="m">1em</span> <span class="k">solid</span> <span class="nb">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.em2</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">2em</span><span class="p">;</span>
    <span class="k">border-top</span><span class="o">:</span> <span class="m">1em</span> <span class="k">solid</span> <span class="nb">green</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.em3</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">1em</span><span class="p">;</span>
    <span class="k">border-top</span><span class="o">:</span> <span class="m">1em</span> <span class="k">solid</span> <span class="nb">blue</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<a name="html:" class="anchor" href="#html:"><h3>HTML:</h3>
</a><pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;em1&quot;</span><span class="nt">&gt;</span>
        Text 1
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;em2&quot;</span><span class="nt">&gt;</span>
            Text 2
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;em3&quot;</span><span class="nt">&gt;</span>
                Text 3
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></div>
</code></pre>
<a name="result:" class="anchor" href="#result:"><h3>Result:</h3>
</a><p><style>
    .container {
        font-size: 16px;
        margin: 0 2rem;
        padding: 1rem;
        background: rgb(240, 240, 240);
        border: 0.0625rem solid rgb(100, 100, 100);
    }
    .em1 {
        font-size: 1em;
        border-top: 1em solid red;
    }
    .em2 {
        font-size: 2em;
        border-top: 1em solid green;
    }
    .em3 {
        font-size: 1em;
        border-top: 1em solid blue;
    }
</style></p>
<div class="container">
    <div class="em1">
        Text 1
        <div class="em2">
            Text 2
            <div class="em3">
                Text 3
            </div>
        </div>
    </div>
</div>

<p>As ems cascade, the <code>font-size</code> of &quot;Text 3&quot; is effectively:</p>
<blockquote>
<p>16px &times; 1 &times; 2 &times; 1 = 32px.</p>
</blockquote>
<a name="the-same-example--but-with-rems" class="anchor" href="#the-same-example--but-with-rems"><h2>The same example, but with rems</h2>
</a><p>If we use rem instead of em in the above example, since rems are always root-relative, the <code>font-size</code> of &quot;Text 3&quot; becomes:</p>
<blockquote>
<p>16px &times; 1 = 16px.</p>
</blockquote>
<a name="css:" class="anchor" href="#css:"><h3>CSS:</h3>
</a><pre><code class="lang-css"><div class="highlight"><pre><span class="nt">html</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">16px</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.rem1</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
    <span class="k">border-top</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span> <span class="k">solid</span> <span class="nb">red</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.rem2</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">2</span><span class="n">rem</span><span class="p">;</span>
    <span class="k">border-top</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span> <span class="k">solid</span> <span class="nb">green</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.rem3</span> <span class="p">{</span>
    <span class="k">font-size</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span>
    <span class="k">border-top</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span> <span class="k">solid</span> <span class="nb">blue</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<a name="html:" class="anchor" href="#html:"><h3>HTML:</h3>
</a><pre><code class="lang-html"><div class="highlight"><pre><span class="nt">&lt;html&gt;</span>
    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;rem1&quot;</span><span class="nt">&gt;</span>
        Text 1
        <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;rem2&quot;</span><span class="nt">&gt;</span>
            Text 2
            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;rem3&quot;</span><span class="nt">&gt;</span>
                Text 3
            <span class="nt">&lt;/div&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</pre></div>
</code></pre>
<a name="result:" class="anchor" href="#result:"><h3>Result:</h3>
</a><p><style>
    .rem1 {
        font-size: 1rem;
        border-top: 1rem solid red;
    }
    .rem2 {
        font-size: 2rem;
        border-top: 1rem solid green;
    }
    .rem3 {
        font-size: 1rem;
        border-top: 1rem solid blue;
    }
</style></p>
<div class="container">
    <div class="rem1">
        Text 1
        <div class="rem2">
            Text 2
            <div class="rem3">
                Text 3
            </div>
        </div>
    </div>
</div>


<a name="why-should-we-do-this-again-" class="anchor" href="#why-should-we-do-this-again-"><h2>Why should we do this again?</h2>
</a><p>If you have a need to dynamically scale your interface, in part or in whole, with absolute precision, rems can be useful.</p>
<ol>
<li><strong>A mobile interface that targets iPad Mini</strong> - You may want a slightly larger interface for the oddly sized iPad Mini display</li>
<li><strong>User preferences for the size of the site</strong> - You could provide a preference to increase the size of your site for a given user across all their devices</li>
<li><strong>You just want things a tad bigger</strong> - If your designers say &quot;make everything 2 pixels bigger,&quot; you&#39;re gonna have a bad time, unlesss you&#39;re using rem units</li>
</ol>
<a name="execution" class="anchor" href="#execution"><h2>Execution</h2>
</a><p>Simply use rems in place of pixels in your CSS:</p>
<pre><code><div class="highlight"><pre><span class="nx">html</span> <span class="p">{</span>
    <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="o">:</span> <span class="mi">16</span><span class="nx">px</span><span class="p">;</span>
<span class="p">}</span>
<span class="p">.</span><span class="nx">header</span> <span class="p">{</span>
    <span class="nx">height</span><span class="o">:</span> <span class="mi">2</span><span class="nx">rem</span><span class="p">;</span> <span class="cm">/* 32px */</span>
    <span class="nx">padding</span><span class="o">:</span> <span class="mf">0.5</span><span class="nx">rem</span><span class="p">;</span> <span class="cm">/* 8px */</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<a name="but-fractions-are-hard--what-if-i-want-9-pixels-" class="anchor" href="#but-fractions-are-hard--what-if-i-want-9-pixels-"><h3>But fractions are hard, what if I want 9 pixels?</h3>
</a><p>If you&#39;re using a CSS preprocessor, which you should be, it&#39;s easy to create a variable that represents a pixel:</p>
<a name="stylus:" class="anchor" href="#stylus:"><h3>Stylus:</h3>
</a><pre><code><div class="highlight"><pre><span class="c1">// The size of 1rem in pixels</span>
<span class="nx">$baseSize</span> <span class="o">=</span> <span class="mi">16</span>

<span class="c1">// The size of a pixel in rems</span>
<span class="nx">$px</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="nx">$baseSize</span> <span class="o">+</span> <span class="mi">0</span><span class="nx">rem</span>
</pre></div>
</code></pre>
<p>Then, in your code, multiply the number of pixels you want by the variable:</p>
<a name="stylus:" class="anchor" href="#stylus:"><h3>Stylus:</h3>
</a><pre><code><div class="highlight"><pre><span class="nx">html</span>
    <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="o">:</span> <span class="nx">$baseSize</span>

<span class="p">.</span><span class="nx">header</span>
    <span class="nx">height</span><span class="o">:</span> <span class="mi">48</span><span class="o">*</span><span class="nx">$px</span>
    <span class="nx">border</span><span class="o">:</span> <span class="nx">$px</span> <span class="nx">solid</span> <span class="nx">black</span>
    <span class="nx">margin</span><span class="o">-</span><span class="nx">bottom</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">*</span><span class="nx">$px</span>
</pre></div>
</code></pre>
<a name="where-you-should-still-use-px" class="anchor" href="#where-you-should-still-use-px"><h2>Where you should still use px</h2>
</a><p>You&#39;ll want to specify the <code>font-size</code> of the <code>&lt;html&gt;</code> element in pixels, but there are a few cases where you might want to use pixels elsewhere in your CSS.</p>
<ul>
<li>As the distance for <code>text-shadow</code> when used for a beveled effect<ul>
<li>Generally, this effect looks bad for &gt; 1px</li>
</ul>
</li>
<li>Elements that you do not want to scale with the rest of the page<ul>
<li>Maybe you want the fine print to stay fine</li>
</ul>
</li>
</ul>
<a name="where-you-should-still-use-em" class="anchor" href="#where-you-should-still-use-em"><h2>Where you should still use em</h2>
</a><p>If you want the flexibility of resizing a particular widget independently of the rest of the page, you should use a mix of em and rem:</p>
<pre><code><div class="highlight"><pre><span class="nx">button</span> <span class="p">{</span>
    <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="o">:</span> <span class="mi">1</span><span class="nx">rem</span><span class="p">;</span>
    <span class="nx">margin</span><span class="o">:</span> <span class="mf">0.5</span><span class="nx">em</span><span class="p">;</span>
    <span class="nx">border</span><span class="o">:</span> <span class="mf">0.0625</span><span class="nx">em</span><span class="p">;</span>
    <span class="nx">padding</span><span class="o">:</span> <span class="mf">0.25</span><span class="nx">em</span> <span class="mf">0.75</span><span class="nx">em</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>Then, to make a large button:</p>
<pre><code><div class="highlight"><pre><span class="nx">button</span><span class="p">.</span><span class="nx">large</span> <span class="p">{</span>
    <span class="nx">font</span><span class="o">-</span><span class="nx">size</span><span class="o">:</span> <span class="mf">1.5</span><span class="nx">rem</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</code></pre>
<p>The rest of the properties, specified in em units, will scale to be 50% larger.</p>
<a name="compatibility" class="anchor" href="#compatibility"><h2>Compatibility</h2>
</a><p>Where rems don&#39;t work:</p>
<ul>
<li>IE 8</li>
<li>iOS 3</li>
<li>Safari 4</li>
</ul>
<p>That said, all modern browsers support rem units. See the <a href="http://caniuse.com/#search=rem">caniuse tables</a> for details.</p>
<a name="fallbacks" class="anchor" href="#fallbacks"><h3>Fallbacks</h3>
</a><p>You can specify units in pixels above if you&#39;d like support for older browsers (minus the scalability):</p>
<pre><code class="lang-css"><div class="highlight"><pre><span class="nt">width</span><span class="o">:</span> <span class="nt">16px</span><span class="o">;</span>
<span class="nt">width</span><span class="o">:</span> <span class="nt">1rem</span><span class="o">;</span>
</pre></div>
</code></pre>
<a name="show-me-the-code" class="anchor" href="#show-me-the-code"><h2>Show me the code</h2>
</a><p>Take a look at the source of <a href="https://github.com/lazd/iOCSS">iOCSS</a> and <a href="https://github.com/lazd/lazd.github.io/tree/build">this blog</a> for a few examples that combine rem units with media queries, ems, and CSS preprocessors.</p>
]]></description><link>http://lazd.github.io/scaleable-interfaces-with-rem-units.html</link><guid isPermaLink="true">http://lazd.github.io/scaleable-interfaces-with-rem-units.html</guid><category><![CDATA[css3]]></category><category><![CDATA[mobile]]></category><dc:creator><![CDATA[Larry Davis]]></dc:creator><pubDate>Sat, 10 Aug 2013 07:00:00 GMT</pubDate></item><item><title><![CDATA[And so it began]]></title><description><![CDATA[<p>I turned the knob to channel 4 and flicked the switch to <code>ON</code>. A  blue screen faded in as the old Zenith TV warmed up.</p>
<pre class="code c64 c64_width fade animate">
<div class="center">
**** COMMODORE 64 BASIC V2 ****
64K RAM SYSTEM  38911 BASIC BYTES FREE</div>
READY.
<span class="c64_cursor"></span>
</pre>

<p>A white block blinked below.</p>
<p>I picked up <a href="http://www.commodore.ca/manuals/c64_users_guide/c64-users_guide.htm">the book</a>. It was spiral bound with a colorful cardboard cover decorated with graphs and a photo of the machine. It looked a bit cheesy even to my 10-year-old self, but I was curious and itching to learn what it had to offer.</p>
<p>I leafed through the pages. <code>PRINT</code>, <code>GOTO</code>, <code>BASIC</code>. It was Greek to me, but there was a section in black and white that looked like a screenshot. I carefully typed the contents, substituting my name for the text between the quotes.</p>
<pre class="code c64 c64_width">
10 PRINT "LARRY"
20 GOTO 10
RUN
</pre>

<p>I pressed <code>RETURN</code> eagerly. The screen filled with my name as the machine executed the first computer program I ever wrote.</p>
<pre class="code c64 c64_width">
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
LARRY
<span class="c64_flash">LARRY</span>
</pre>

<p>All I had really done was instruct the computer to print <code>LARRY</code> in an infinite loop, but I felt empowered. It was as if I could instruct this little machine to work miracles and it would instantly oblige, in capital letters, of course.</p>
<p>That book had opened the door to a new world. I pressed the <code>RUN/STOP</code> key.</p>
<pre class="code c64 c64_width animate">
BREAK IN 10
READY.
<span class="c64_cursor"></span>
</pre>

<p>A white block blinked below. And so it began.</p>
<hr>

<p>Flip a switch and start coding. Using a computer meant writing code, and a casual user could become a hobbyist programmer in an afternoon with no additional equipment or materials.</p>
<p>As computing became more common place, graphical user interfaces sustituted tthe commands we used to type with clickable icons. Computing became accessible to everyone as the workings of the machine were hidden by layer upon layer of abstraction. This transformation was amazing and beautiful, but it came at a cost: The machine transformed from a playground that encouraged tinkering to an appliance that forbade it.</p>
<p>Eventually, computers began to ship with no development environment and no casual path for a user to transition to a hobbyist.</p>
<a name="the-renaissance" class="anchor" href="#the-renaissance"><h2>The renaissance</h2>
</a><p>JavaScript is everywhere. Nearly every device we own is capable of running human-readable JavaScript code. Hit command+option+i <em>right now</em> and you&#39;ll drop to the console. Type this and hit enter:</p>
<pre><code class="lang-javascript"><div class="highlight"><pre><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Hello world!&#39;</span><span class="p">);</span>
</pre></div>
</code></pre>
<p>You just wrote your first computer program.</p>
<p>Things are different now. You won&#39;t have to leaf through the dusty pages of an old spiral bound user&#39;s guide. Thousands of tutorials and resources are available for free, and you have the most powerful knowledge search system mankind has ever created beneath your fingertips, ready to find them.</p>
<p>Your journey begins <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide" target="_blank">here</a>.</p>
]]></description><link>http://lazd.github.io/and-so-it-began.html</link><guid isPermaLink="true">http://lazd.github.io/and-so-it-began.html</guid><category><![CDATA[programming]]></category><category><![CDATA[commodore]]></category><category><![CDATA[c64]]></category><category><![CDATA[basic]]></category><dc:creator><![CDATA[Larry Davis]]></dc:creator><pubDate>Mon, 01 Jul 2013 07:00:00 GMT</pubDate></item></channel></rss>